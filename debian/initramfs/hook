#!/bin/sh
#
# Copyright Â© 2006 Martin F. Krafft <madduck@debian.org>
# based on the scripts in the initramfs-tools package.
# released under the terms of the Artistic Licence.
#
# $Id$
#

set -eu

PREREQ=""

prereqs()
{
	echo "$PREREQ"
}

case ${1:-} in
  prereqs)
    prereqs
    exit 0
    ;;
esac

if [ -e /usr/share/initramfs-tools/hooks/md ]; then
  echo "I: mdadm: initramfs md hook still present, stepping out of its way." >&2
  echo "I: Please see /usr/share/doc/mdadm/README.initramfs-transition ." >&2
  exit 0
fi

if [ -e /etc/initramfs-tools/hooks/md ]; then
  echo "W: mdadm: I found /etc/initramfs-tools/hooks/md, which may conflict" >&2
  echo "with this version of mdadm. Please see /usr/share/doc/mdadm/README.mdrun" >&2
  echo "and /usr/share/initramfs-tools/hooks/mdadm for reference and update" >&2
  echo "(or remove) the file." >&2
  exit 0
fi

MDADM=$(command -v mdadm 2>/dev/null) || :
[ -x $MDADM ] || exit 0

[ -r /usr/share/initramfs-tools/hook-functions ] || exit 0
. /usr/share/initramfs-tools/hook-functions

CONFIG=/etc/mdadm/mdadm.conf
ALTCONFIG=/etc/mdadm.conf

[ ! -f $CONFIG ] && [ -f $ALTCONFIG ] && CONFIG=$ALTCONFIG
if [ -f $CONFIG ]; then
  if [ -e /var/lib/mdadm/CONF-UNCHECKED ]; then
    # the file comes from an old installation and hence is not guaranteed to
    # work. We thus refuse to work.

    echo "E: mdadm: unchecked mdadm.conf file found." >&2
    echo "I: mdadm: please read /usr/share/doc/mdadm/README.upgrading-2.5.3.gz ." >&2
    echo "I: mdadm: leaving RAID initialisation to initramfs (mdrun)." >&2
    exit 0
  fi

else
  # there is no configuration file, so let's create one
  if /usr/share/mdadm/mkconf generate $CONFIG; then
    echo "I: mdadm: auto-generated the mdadm.conf configuration file." >&2
  else
    echo "E: mdadm: failed to autogenerate the mdadm.conf file." >&2
    echo "I: mdadm: leaving RAID initialisation to initramfs (mdrun)." >&2
    rm -f $CONFIG
    exit 0
  fi
fi

# install the configuration file
mkdir -p $DESTDIR/etc/mdadm
sed -e :a -re '$!N;s/\n[[:space:]]+/ /;ta' -ne '/^(ARRAY|DEVICE)/P;D' \
  < $CONFIG > $DESTDIR/etc/mdadm/mdadm.conf

# obtain dev:level pairs from config file, honouring multiline entries
devpairs="$(
  while read line; do
    for atom in $line; do
      case "$atom" in
        (/dev*) dev=$atom;;
        (level=*) level=${atom#level=};;
        (*) :;;
      esac
    done
    [ -n "${dev:-}" ] && echo -n "${dev}:${level} "
  done < $DESTDIR/etc/mdadm/mdadm.conf)"

copy_exec $MDADM /sbin

# copy all modules into the initramfs, just for safety.
# we copy raid456 / raid5+raid6 because the hook script just won't do
# anything when the module cannot be found.
modules="linear multipath raid0 raid1 raid456 raid5 raid6 raid10"
for mod in $modules; do manual_add_modules $mod; done

uniquify()
{
  for i in $@; do echo "$i"; done | sort -u
}

DEBIANCONFIG=/etc/default/mdadm
INITRDSTART=all
[ -s $DEBIANCONFIG ] && . $DEBIANCONFIG

# save the homehost for now, even if we don't use it yet
homehost="$(sed -ne 's,^[[:space:]]*HOMEHOST[[:space:]]*,,p' $CONFIG)"
if [ -z "$homehost" ] || [ "$homehost" = '<system>' ]; then
  homehost="$(hostname)"
fi
echo "MD_HOMEHOST='$homehost'" > $DESTDIR/conf/md.conf

[ -z "$INITRDSTART" ] && INITRDSTART=none
if [ "$INITRDSTART" != none ] && [ -n "$devpairs" ]; then
  echo "MD_DEVPAIRS='${devpairs% }'" >> $DESTDIR/conf/md.conf

  devs=''; levels=''
  for i in $devpairs; do
    dev=${i%:*}
    level=${i##*:}
    case "$INITRDSTART" in
      all|*${dev}*)
        devs="${devs:+$devs }$dev"
        levels="${levels:+$levels }$level"
        ;;
      *) :;;
    esac
  done

  for i in $INITRDSTART; do
    case "$devs" in
      all|*${i}*) continue;;
      *) :;;
    esac

    echo "W: mdadm: I am supposed to start $i from the initial ramdisk," >&2
    echo "W: mdadm: yet I cannot find the array in the configuration file." >&2
    echo "W: mdadm: I am thus reverting to starting all arrays." >&2
    INITRDSTART=all
    break
  done

  echo "MD_LEVELS='$levels'" >> $DESTDIR/conf/md.conf
  if [ "$INITRDSTART" = all ]; then
    echo "MD_DEVS=all" >> $DESTDIR/conf/md.conf
  else
    echo "MD_DEVS='$devs'" >> $DESTDIR/conf/md.conf
  fi

  # raid4 is handled by raid5
  modules="$(echo $levels | sed -e 's,raid4,raid5,g')"

  # if raid456 module is present, use it for raid[456]
  modprobe --set-version="$version" --show-depends raid456 >/dev/null 2>&1 \
    && modules="$(echo $modules | sed -e 's,raid[456],raid456,g')"

  modules="$(uniquify $modules | tr '\n' ' ')"
  echo "MD_MODULES='${modules% }'" >> $DESTDIR/conf/md.conf

  if [ "$INITRDSTART" = all ]; then
    echo "I: mdadm: will start all available MD arrays from the initial ramdisk." >&2
  else
    for i in $devs; do
      echo "I: mdadm: will start MD array $i from the initial ramdisk." >&2
    done
  fi

else
  echo "MD_DEVS=none" >> $DESTDIR/conf/md.conf
  echo "I: mdadm: no MD arrays will be started from the initial ramdisk." >&2
fi

# only output this on Debian systems
[ -s /etc/default/mdadm ] && \
  echo 'I: mdadm: use `dpkg-reconfigure --priority=low mdadm` to change this.' >&2

exit 0
