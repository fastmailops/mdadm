#!/bin/sh -eu
#
# Copyright Â© 2006 Martin F. Krafft <madduck@debian.org>
# based on the scripts in the initramfs-tools package.
# released under the terms of the Artistic Licence.
#

PREREQ=""

prereqs()
{
	echo "$PREREQ"
}

case ${1:-} in
  prereqs)
    prereqs
    exit 0
    ;;
esac

if [ -e /usr/share/initramfs-tools/hooks/md ]; then
  echo "I: mdadm: initramfs md hook still present, stepping out of its way." >&2
  echo "I: Please see /usr/share/doc/mdadm/README.initramfs-transition ." >&2
  exit 0
fi

if [ -e /etc/initramfs-tools/hooks/md ]; then
  echo "W: mdadm: I found /etc/initramfs-tools/hooks/md, which may conflict" >&2
  echo "with this version of mdadm. Please see /usr/share/doc/mdadm/README.mdrun" >&2
  echo "and /usr/share/initramfs-tools/hooks/mdadm for reference and update" >&2
  echo "(or remove) the file." >&2
  exit 0
fi

MDADM=$(command -v mdadm)
[ -x $MDADM ] || exit 0

[ -r /usr/share/initramfs-tools/hook-functions ] || exit 0
. /usr/share/initramfs-tools/hook-functions

INITRDSTART=all
[ -s /etc/default/mdadm ] && . /etc/default/mdadm

DEVS=''; LEVELS=''
if [ "$INITRDSTART" != none ]; then
  eval $(mdadm --examine --scan --config=partitions \
    | while read a dev level num uuid; do
      case "$dev" in
        (/dev/md[0-9]*|/dev/md_d[0-9]*)
          dev_part="${dev#/dev/md}"
          devfs_name="/dev/md/${dev_part#_}"
            if [ -b "$dev" ] && [ -b "$devfs_name" ] \
                && expr "$INITRDSTART" : ".*${devfs_name}.*" >/dev/null; then
              echo "W: mdadm: both $dev and $devfs_name exist, and $devfs_name appears to be used." >&2
              echo "W: mdadm: applying workaround for mdadm bug, don't worry! (see #381181)" >&2
              dev="$devfs_name"
            fi
          ;;
      esac

      if [ "$INITRDSTART" = all ] || expr "$INITRDSTART" : ".*${dev}.*" >/dev/null; then
          uuid="${uuid#*UUID=}"
          DEVS="$DEVS ${dev}=${uuid%% *}"
          LEVELS="$LEVELS ${level#level=}"
      fi

      echo "DEVS='$DEVS'"
      echo "LEVELS='$LEVELS'"
    done)

  [ "$INITRDSTART" = all ] && DEVS=all
fi

uniquify()
{
  for i in $@; do echo "$i"; done | sort -u
}

if [ -n "$DEVS" ]; then

  homehost=$(sed -ne 's,^[[:space:]]*HOMEHOST[[:space:]]*,,p' \
    /etc/mdadm.conf /etc/mdadm/mdadm.conf 2>/dev/null || :)
  if [ -z "$homehost" ] || [ "$homehost" = '<system>' ]; then
    homehost="$(hostname)"
  fi
  echo "RAID_HOMEHOST='$homehost'" > DESTDIR/conf/raid.conf
  echo "RAID_DEVS='${DEVS## }'" >> $DESTDIR/conf/raid.conf
  echo "RAID_LEVELS='${LEVELS## }'" >> $DESTDIR/conf/raid.conf

  # raid4 is handled by raid5
  MODULES="$(echo $LEVELS | sed -e 's,raid4,raid5,g')"

  # if raid456 module is present, use it for raid[456]
  modprobe --set-version="$version" --show-depends raid456 >/dev/null 2>&1 \
    && MODULES="$(echo $MODULES | sed -e 's,raid[456],raid456,g')"

  MODULES="$(uniquify $MODULES | tr '\n' ' ')"
  echo "RAID_MODULES='${MODULES%% }'" >> $DESTDIR/conf/raid.conf

  copy_exec $MDADM /sbin

  # copy all modules into the initramfs, just for safety.
  # we copy raid456 / raid5+raid6 because the hook script just won't do
  # anything when the module cannot be found.
  MODULES="linear multipath raid0 raid1 raid456 raid5 raid6 raid10"
  for mod in $MODULES; do manual_add_modules $mod; done

  if [ "$DEVS" = all ]; then
    DEVNAMES="all RAID arrays"
  else
    DEVNAMES="$(for i in $DEVS; do echo -n "${i%=*},"; done)"
    DEVNAMES="${DEVNAMES%,}"
  fi

  echo "I: mdadm: RAID support installed to mount $DEVNAMES during boot." >&2

else
  echo "I: mdadm: no RAID devices selected for initrd initialisation." >&2
  echo "I: mdadm: not including RAID stuff." >&2
fi

[ -s /etc/default/mdadm ] && \
  echo 'I: mdadm: use `dpkg-reconfigure -plow mdadm` to change this.' >&2

exit 0
